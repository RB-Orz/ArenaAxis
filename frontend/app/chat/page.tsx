// Trang chat - n∆°i ng∆∞·ªùi d√πng trao ƒë·ªïi tin nh·∫Øn v·ªõi nhau
"use client"

import { useState, useEffect, useRef } from "react"
import ChatSidebar from "@/components/chat/ChatSidebar"
import ChatHeader from "@/components/chat/ChatHeader"
import MessageBubble from "@/components/chat/MessageBubble"
import MessageInput from "@/components/chat/MessageInput"
import { getChatRooms, getChatMessages, sendMessage } from "@/services/api"
import { ChatRoom, ChatMessage } from "@/types"

export default function ChatPage() {
  // State qu·∫£n l√Ω danh s√°ch ph√≤ng chat
  const [chatRooms, setChatRooms] = useState<ChatRoom[]>([])
  const [selectedChat, setSelectedChat] = useState<ChatRoom | null>(null)
  const [searchQuery, setSearchQuery] = useState("")

  // State qu·∫£n l√Ω tin nh·∫Øn
  const [messages, setMessages] = useState<ChatMessage[]>([])
  const [loading, setLoading] = useState(true)
  const [sendingMessage, setSendingMessage] = useState(false)

  // Ref ƒë·ªÉ auto scroll xu·ªëng tin nh·∫Øn m·ªõi nh·∫•t
  const messagesEndRef = useRef<HTMLDivElement>(null)

  // useEffect ƒë·ªÉ fetch danh s√°ch ph√≤ng chat khi component mount
  useEffect(() => {
    const fetchChatRooms = async () => {
      try {
        const roomsData = await getChatRooms()
        setChatRooms(roomsData)

        // T·ª± ƒë·ªông ch·ªçn ph√≤ng chat ƒë·∫ßu ti√™n
        if (roomsData.length > 0) {
          setSelectedChat(roomsData[0])
        }
      } catch (error) {
        console.error('Error fetching chat rooms:', error)
      } finally {
        setLoading(false)
      }
    }

    fetchChatRooms()
  }, [])

  // useEffect ƒë·ªÉ fetch tin nh·∫Øn khi thay ƒë·ªïi ph√≤ng chat
  useEffect(() => {
    const fetchMessages = async () => {
      if (selectedChat) {
        try {
          const messagesData = await getChatMessages(selectedChat.id)
          setMessages(messagesData)
        } catch (error) {
          console.error('Error fetching messages:', error)
        }
      }
    }

    fetchMessages()
  }, [selectedChat])

  // useEffect ƒë·ªÉ auto scroll xu·ªëng tin nh·∫Øn m·ªõi nh·∫•t
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" })
  }, [messages])

  // X·ª≠ l√Ω ch·ªçn ph√≤ng chat
  const handleSelectChat = (room: ChatRoom) => {
    setSelectedChat(room)
  }

  // X·ª≠ l√Ω g·ª≠i tin nh·∫Øn
  const handleSendMessage = async (content: string) => {
    if (!selectedChat || !content.trim()) return

    setSendingMessage(true)
    try {
      // G·ªçi API g·ª≠i tin nh·∫Øn
      const success = await sendMessage(selectedChat.id, content)

      if (success) {
        // Th√™m tin nh·∫Øn m·ªõi v√†o state (gi·∫£ l·∫≠p real-time)
        const newMessage: ChatMessage = {
          id: Date.now().toString(), // T·∫°m th·ªùi d√πng timestamp l√†m ID
          text: content,
          senderId: "current-user", // S·∫Ω ƒë∆∞·ª£c thay th·∫ø b·∫±ng user ID th·ª±c
          roomId: selectedChat.id,
          timestamp: new Date(),
          type: "text"
        }

        setMessages(prev => [...prev, newMessage])

        // C·∫≠p nh·∫≠t last message trong sidebar
        setChatRooms(prev =>
          prev.map(room =>
            room.id === selectedChat.id
              ? {
                ...room,
                lastMessage: {
                  id: newMessage.id,
                  text: newMessage.text,
                  senderId: newMessage.senderId,
                  timestamp: newMessage.timestamp
                }
              }
              : room
          )
        )
      }
    } catch (error) {
      console.error('Error sending message:', error)
    } finally {
      setSendingMessage(false)
    }
  }

  // L·ªçc ph√≤ng chat theo t·ª´ kh√≥a t√¨m ki·∫øm
  const filteredChatRooms = chatRooms.filter(room =>
    room.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
    room.lastMessage.text.toLowerCase().includes(searchQuery.toLowerCase())
  )

  // Hi·ªÉn th·ªã loading state
  if (loading) {
    return (
      <div className="h-screen bg-white flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-green-600 mx-auto mb-4"></div>
          <p className="text-gray-600">ƒêang t·∫£i tin nh·∫Øn...</p>
        </div>
      </div>
    )
  }

  // Render giao di·ªán chat ch√≠nh
  return (
    <div className="h-screen bg-white flex">
      {/* Sidebar danh s√°ch ph√≤ng chat */}
      <ChatSidebar
        chatRooms={filteredChatRooms}
        selectedChatId={selectedChat?.id || ""}
        onSelectChat={handleSelectChat}
        searchQuery={searchQuery}
        onSearchChange={setSearchQuery}
      />

      {/* Khu v·ª±c chat ch√≠nh */}
      {selectedChat ? (
        <div className="flex-1 flex flex-col">
          {/* Header ph√≤ng chat */}
          <ChatHeader
            selectedChat={selectedChat}
            memberCount={4}
            onMembersClick={() => console.log('Show members')}
            onMoreClick={() => console.log('Show more options')}
          />

          {/* Danh s√°ch tin nh·∫Øn */}
          <div className="flex-1 overflow-y-auto p-4 space-y-4">
            {messages.map((message) => (
              <MessageBubble
                key={message.id}
                message={message}
                isMe={message.senderId === "current-user"}
              />
            ))}

            {/* Div ƒë·ªÉ auto scroll xu·ªëng tin nh·∫Øn m·ªõi nh·∫•t */}
            <div ref={messagesEndRef} />
          </div>

          {/* Thanh nh·∫≠p tin nh·∫Øn */}
          <MessageInput
            onSendMessage={handleSendMessage}
            placeholder="Nh·∫≠p tin nh·∫Øn..."
            disabled={sendingMessage}
          />
        </div>
      ) : (
        // Hi·ªÉn th·ªã khi ch∆∞a ch·ªçn ph√≤ng chat n√†o
        <div className="flex-1 flex items-center justify-center bg-gray-50">
          <div className="text-center text-gray-500">
            <div className="text-6xl mb-4">üí¨</div>
            <h3 className="text-lg font-medium mb-2">Ch·ªçn m·ªôt cu·ªôc tr√≤ chuy·ªán</h3>
            <p>Ch·ªçn m·ªôt ph√≤ng chat ƒë·ªÉ b·∫Øt ƒë·∫ßu nh·∫Øn tin</p>
          </div>
        </div>
      )}
    </div>
  )
}
