// Trang l·ªãch s·ª≠ ƒë·∫∑t s√¢n - hi·ªÉn th·ªã c√°c l·∫ßn ƒë·∫∑t s√¢n c·ªßa ng∆∞·ªùi d√πng
"use client"

import { useState, useEffect } from "react"
import Link from "next/link"
import { Button } from "@/components/ui/button"
import BookingHeader from "@/components/booking/BookingHeader"
import BookingTabs from "@/components/booking/BookingTabs"
import BookingCard from "@/components/booking/BookingCard"
import { getBookingHistory, cancelBooking } from "@/services/api"
import { Booking } from "@/types"

export default function BookingHistoryPage() {
  // State qu·∫£n l√Ω tab hi·ªán t·∫°i
  const [activeTab, setActiveTab] = useState("T·∫•t c·∫£")

  // State qu·∫£n l√Ω d·ªØ li·ªáu booking
  const [bookings, setBookings] = useState<Booking[]>([])
  const [filteredBookings, setFilteredBookings] = useState<Booking[]>([])
  const [loading, setLoading] = useState(true)

  // Danh s√°ch c√°c tab
  const tabs = ["T·∫•t c·∫£", "S·∫Øp t·ªõi", "ƒê√£ xong", "ƒê√£ h·ªßy"]

  // useEffect ƒë·ªÉ fetch d·ªØ li·ªáu booking khi component mount
  useEffect(() => {
    const fetchBookings = async () => {
      try {
        const bookingsData = await getBookingHistory()
        setBookings(bookingsData)
      } catch (error) {
        console.error('Error fetching booking history:', error)
      } finally {
        setLoading(false)
      }
    }

    fetchBookings()
  }, [])

  // useEffect ƒë·ªÉ l·ªçc booking theo tab ƒëang active
  useEffect(() => {
    if (activeTab === "T·∫•t c·∫£") {
      setFilteredBookings(bookings)
    } else {
      // Map t·ª´ tab title sang status values
      const statusMap: { [key: string]: string } = {
        "S·∫Øp t·ªõi": "confirmed",
        "ƒê√£ xong": "completed",
        "ƒê√£ h·ªßy": "cancelled"
      }
      const statusValue = statusMap[activeTab]
      if (statusValue) {
        setFilteredBookings(bookings.filter(booking => booking.status === statusValue))
      }
    }
  }, [activeTab, bookings])

  // X·ª≠ l√Ω thay ƒë·ªïi tab
  const handleTabChange = (tab: string) => {
    setActiveTab(tab)
  }

  // X·ª≠ l√Ω c√°c h√†nh ƒë·ªông tr√™n booking (Chi ti·∫øt, H·ªßy ƒë·∫∑t, ƒê·∫∑t l·∫°i)
  const handleBookingAction = async (bookingId: string, action: string) => {
    switch (action) {
      case "Chi ti·∫øt":
        // Navigate ƒë·∫øn trang chi ti·∫øt booking
        console.log(`View details for booking ${bookingId}`)
        break

      case "H·ªßy ƒë·∫∑t":
        // G·ªçi API h·ªßy ƒë·∫∑t s√¢n
        if (confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën h·ªßy ƒë·∫∑t s√¢n n√†y?")) {
          try {
            const success = await cancelBooking(bookingId)
            if (success) {
              // C·∫≠p nh·∫≠t tr·∫°ng th√°i booking trong state
              setBookings(prev =>
                prev.map(booking =>
                  booking.id === bookingId
                    ? {
                      ...booking,
                      status: "cancelled" as const,
                      statusColor: "bg-red-100 text-red-800",
                      actions: ["Chi ti·∫øt"]
                    }
                    : booking
                )
              )
              alert("H·ªßy ƒë·∫∑t s√¢n th√†nh c√¥ng!")
            } else {
              alert("Kh√¥ng th·ªÉ h·ªßy ƒë·∫∑t s√¢n. Vui l√≤ng th·ª≠ l·∫°i.")
            }
          } catch (error) {
            console.error('Error canceling booking:', error)
            alert("C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i.")
          }
        }
        break

      case "ƒê·∫∑t l·∫°i":
        // Navigate ƒë·∫øn trang ƒë·∫∑t s√¢n v·ªõi th√¥ng tin t∆∞∆°ng t·ª±
        console.log(`Rebook booking ${bookingId}`)
        break

      default:
        console.log(`Unknown action: ${action}`)
    }
  }

  // Hi·ªÉn th·ªã loading state
  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50">
        <BookingHeader />
        <div className="container mx-auto px-4 py-6 max-w-4xl">
          <div className="flex items-center justify-center py-12">
            <div className="text-center">
              <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-green-600 mx-auto mb-4"></div>
              <p className="text-gray-600">ƒêang t·∫£i l·ªãch s·ª≠ ƒë·∫∑t s√¢n...</p>
            </div>
          </div>
        </div>
      </div>
    )
  }
  // Render giao di·ªán ch√≠nh
  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header trang */}
      <BookingHeader />

      <div className="container mx-auto px-4 py-6 max-w-4xl">
        {/* Tabs l·ªçc theo tr·∫°ng th√°i */}
        <BookingTabs
          activeTab={activeTab}
          onTabChange={handleTabChange}
          tabs={tabs}
        />

        {/* Danh s√°ch booking */}
        <div className="space-y-4">
          {filteredBookings.map((booking) => (
            <BookingCard
              key={booking.id}
              booking={booking}
              onAction={handleBookingAction}
            />
          ))}
        </div>

        {/* Hi·ªÉn th·ªã message khi kh√¥ng c√≥ booking */}
        {filteredBookings.length === 0 && (
          <div className="text-center py-12">
            <div className="text-gray-400 text-6xl mb-4">üìÖ</div>
            <h3 className="text-lg font-medium text-gray-900 mb-2">
              {activeTab === "T·∫•t c·∫£"
                ? "Ch∆∞a c√≥ l·ªãch ƒë·∫∑t s√¢n n√†o"
                : `Kh√¥ng c√≥ booking n√†o ·ªü tr·∫°ng th√°i "${activeTab}"`
              }
            </h3>
            <p className="text-gray-600 mb-6">
              {activeTab === "T·∫•t c·∫£"
                ? "H√£y ƒë·∫∑t s√¢n ƒë·∫ßu ti√™n c·ªßa b·∫°n ƒë·ªÉ b·∫Øt ƒë·∫ßu ch∆°i th·ªÉ thao!"
                : "Th·ª≠ chuy·ªÉn sang tab kh√°c ƒë·ªÉ xem c√°c booking kh√°c."
              }
            </p>
            {activeTab === "T·∫•t c·∫£" && (
              <Link href="/fields">
                <Button className="bg-green-600 hover:bg-green-700">
                  ƒê·∫∑t s√¢n ngay
                </Button>
              </Link>
            )}
          </div>
        )}
      </div>
    </div>
  )
}
