// Component hi·ªÉn th·ªã m·ªôt b√†i vi·∫øt trong c·ªông ƒë·ªìng
// Cho ph√©p ng∆∞·ªùi d√πng xem th√¥ng tin chi ti·∫øt v√† t∆∞∆°ng t√°c

import Link from "next/link"
import { Card, CardContent } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { MapPin, Clock, Heart, MessageCircle, Users } from "lucide-react"
import { CommunityPost } from "@/types"

interface CommunityPostCardProps {
    post: CommunityPost // Props nh·∫≠n th√¥ng tin b√†i vi·∫øt
    onLike?: (postId: string) => void // Callback khi like b√†i vi·∫øt (optional)
    onComment?: (postId: string) => void // Callback khi comment (optional)
    onJoin?: (postId: string) => void // Callback khi tham gia (optional)
}

export default function CommunityPostCard({
    post,
    onLike,
    onComment,
    onJoin
}: CommunityPostCardProps) {
    // Helper functions ƒë·ªÉ derive c√°c gi√° tr·ªã t·ª´ CommunityPost data
    const getSportColor = (sport: string) => {
        const sportLower = sport.toLowerCase()
        if (sportLower.includes("b√≥ng ƒë√°")) return "bg-green-500"
        if (sportLower.includes("tennis")) return "bg-blue-500"
        if (sportLower.includes("c·∫ßu l√¥ng")) return "bg-purple-500"
        if (sportLower.includes("b√≥ng r·ªï")) return "bg-orange-500"
        return "bg-gray-500"
    }

    const formatTimeAgo = (createdAt: string) => {
        const now = new Date()
        const created = new Date(createdAt)
        const diffInMinutes = Math.floor((now.getTime() - created.getTime()) / (1000 * 60))

        if (diffInMinutes < 1) return "V·ª´a xong"
        if (diffInMinutes < 60) return `${diffInMinutes} ph√∫t tr∆∞·ªõc`
        if (diffInMinutes < 1440) return `${Math.floor(diffInMinutes / 60)} gi·ªù tr∆∞·ªõc`
        return `${Math.floor(diffInMinutes / 1440)} ng√†y tr∆∞·ªõc`
    }

    const getAuthorAvatar = (name: string) => {
        return name.charAt(0).toUpperCase()
    }

    // Derive values t·ª´ content ho·∫∑c s·ª≠ d·ª•ng mock data
    const location = "H√† N·ªôi" // Could be derived from content or tags
    const time = "19:00 - 21:00" // Could be derived from content
    const level = "Trung b√¨nh" // Could be derived from content or tags 
    const price = "150.000 VNƒê" // Could be derived from content
    const duration = "C√≤n 3 ng√†y" // Could be calculated from createdAt
    const participants = Math.floor(Math.random() * 10) + 1 // Mock data
    return (
        <Card className="hover:shadow-md transition-shadow bg-white">
            <CardContent className="p-6">
                {/* Th√¥ng tin t√°c gi·∫£ */}
                <div className="flex items-center gap-3 mb-4">
                    {/* Avatar t√°c gi·∫£ */}
                    <div className="w-12 h-12 bg-green-500 rounded-full flex items-center justify-center text-white font-bold text-lg">
                        {getAuthorAvatar(post.author.name)}
                    </div>

                    {/* T√™n v√† th·ªùi gian */}
                    <div>
                        <h4 className="font-semibold text-lg">{post.author.name}</h4>
                        <p className="text-sm text-gray-500">{formatTimeAgo(post.createdAt)}</p>
                    </div>
                </div>

                {/* Ti√™u ƒë·ªÅ b√†i vi·∫øt - c√≥ th·ªÉ click ƒë·ªÉ xem chi ti·∫øt */}
                <Link href={`/community/${post.id}`}>
                    <h3 className="text-xl font-bold mb-3 hover:text-green-600 cursor-pointer">
                        {post.title}
                    </h3>
                </Link>

                {/* Th√¥ng tin m√¥n th·ªÉ thao, ƒë·ªãa ƒëi·ªÉm, th·ªùi gian */}
                <div className="flex items-center gap-4 mb-3 text-sm flex-wrap">
                    {/* Badge m√¥n th·ªÉ thao */}
                    <Badge className={`${getSportColor(post.sport)} text-white border-0`}>
                        {post.sport}
                    </Badge>

                    {/* ƒê·ªãa ƒëi·ªÉm */}
                    <div className="flex items-center gap-1 text-gray-600">
                        <MapPin className="w-4 h-4" />
                        <span className="truncate">{location}</span>
                    </div>

                    {/* Th·ªùi gian */}
                    <div className="flex items-center gap-1 text-gray-600">
                        <Clock className="w-4 h-4" />
                        <span>{time}</span>
                    </div>
                </div>

                {/* M√¥ t·∫£ b√†i vi·∫øt */}
                <p className="text-gray-700 mb-4 leading-relaxed">{post.content}</p>

                {/* Th√¥ng tin chi ti·∫øt: level, chi ph√≠, th·ªùi h·∫°n */}
                <div className="flex items-center gap-3 mb-4 text-sm flex-wrap">
                    <span className="text-gray-600">
                        Level: <span className="font-medium">{level}</span>
                    </span>
                    <span className="text-gray-600">
                        Chi ph√≠: <span className="font-medium text-green-600">{price}</span>
                    </span>
                    <span className="text-red-600 font-medium">{duration}</span>
                </div>

                {/* H√¨nh ·∫£nh minh h·ªça cho b√†i vi·∫øt */}
                <div className={`${getSportColor(post.sport)} text-white p-8 rounded-lg mb-4 text-center`}>
                    <h4 className="text-3xl font-bold">
                        {post.sport === "Tennis"
                            ? "üéæ Tennis Court"
                            : post.sport === "B√≥ng ƒë√°"
                                ? "‚öΩ Football Field"
                                : post.sport === "C·∫ßu l√¥ng"
                                    ? "üè∏ Badminton Court"
                                    : "üèÜ Sports Court"}
                    </h4>
                </div>

                {/* H√†nh ƒë·ªông: like, comment, tham gia */}
                <div className="flex items-center justify-between">
                    <div className="flex items-center gap-6">
                        {/* N√∫t Like */}
                        <button
                            onClick={() => onLike?.(post.id)}
                            className="flex items-center gap-2 text-gray-600 hover:text-red-500 transition-colors"
                        >
                            <Heart className="w-4 h-4" />
                            <span>{post.likes}</span>
                        </button>

                        {/* N√∫t Comment */}
                        <button
                            onClick={() => onComment?.(post.id)}
                            className="flex items-center gap-2 text-gray-600 hover:text-blue-500 transition-colors"
                        >
                            <MessageCircle className="w-4 h-4" />
                            <span>{post.comments}</span>
                        </button>

                        {/* Hi·ªÉn th·ªã s·ªë ng∆∞·ªùi ƒë√£ tham gia */}
                        <span className="text-sm text-gray-600">{participants} ƒë√£ tham gia</span>

                        {/* N√∫t Tham gia */}
                        <Button
                            size="sm"
                            onClick={() => onJoin?.(post.id)}
                            className="bg-green-600 hover:bg-green-700 text-white px-4 py-1 h-8"
                        >
                            Tham gia
                        </Button>
                    </div>

                    {/* S·ªë l∆∞·ª£ng th√†nh vi√™n */}
                    <div className="flex items-center gap-2">
                        <Users className="w-4 h-4 text-gray-600" />
                        <span className="text-sm font-medium">{participants}</span>
                    </div>
                </div>
            </CardContent>
        </Card>
    )
}
